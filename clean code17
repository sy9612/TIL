## 17장 냄새와 휴리스틱

- 휴리스틱이란?

 불충분한 시간이나 정보로 인하여 합리적인 판단을 할 수 없거나, 체계적이면서 합리적인 판단이 굳이 필요하지 않은 상황에서 사람들이 빠르게 사용할 수 있게 보다 용이하게 구성된 간편추론의 방법

- 주석

  - 작성자, 최종 수정일, SPR 번호 등과 같은 메타 정보만 주석으로 넣음
  - 쓸모 없어질 주석은 아예 달지 마라
  - 코드만으로 충분한데 구구절절 설명한 주석
  - 주석 처리된 코드를 발견하면 즉각 지워라! 소스 코드 관리 시스템이 기억하니까

- 환경

  - 빌드는 간단히 한 단계로 끝나야 함, 한 명령으로 전체를 체크아웃해서 한 명령으로 빌드할 수 있어야 함
  - 모든 단위 테스트는 한 명령으로 돌려야 함

- 함수

  - 인수 개수는 적을수록 좋음
  - 출력 인수를 쓰지 말고 함수가 속한 객체의 상태를 변경하라
  - boolean 인수는 함수가 여러 기능을 수행한다는 명백한 증거, 혼란을 초래하므로 피해야 마땅
  - 아무도 호출하지 않는 함수는 삭제하라

- 일반

  - 소스 파일 하나에 언어 하나만 사용하는 방식이 가장 좋음

    - 나쁜 예) 자바소스 파일에 XML, HTML, YAML, Javadoc, Javascript, 영어 등

      ​			JSP파일에 HTML, 자바, 태그 라이브러리, javascript

  - 함수나 클래스는 다른 프로그래머가 당연하게 여길만한 동작과 기능을 제공해야 함

  - 모든 경계 조건을 찾아내어 테스트하는 테스트 케이스를 작성하라

  - 중복된 코드는 하위 루틴이나 다른 클래스로 분리하라

  - if/else문이나 switch/case문의 똑같은 조건을 거듭 확인하는 중복은 다형성으로 대체

  -  모든 저차원 개념은 파생 클래스에 넣고, 모든 고차원 개념은 기초 클래스에 넣는다

  - 잘 정의된 모듈은 인터페이스가 아주 작음, 잘 정의된 인터페이스는 많은 함수를 제공하지 않음, 결합도⬇️

  - 실행되지 않는 코드는 시스템에서 제거하라

    - 불가능한 조건을 확인하는 if문, throw 문이 없는 try문에서 catch 블럭

  - 변수와 함수는 사용되는 위치에 가깝게 정의, 비공개 함수는 처음으로 호출한 직후에 정의

  - 표기법은 신중하게 선택하고 다른 함수에서도 일관성 있게 동일한 변수 이름을 사용

  - 아무도 사용하지 않는 변수, 함수, 주석 등을 제거하기

  - 뚜렷한 목적없이 변수, 상수, 함수를 당장 편한위치에 넣지 말기

  - 메서드가 다른 객체의 참조와 변경자를 사용해 그 객체 내용을 조작하도록 하지 말기

  - 함수의 이름과 기능이 일치하도록 하기

  - 테스트 케이스가 모두 통과한다고 끝내지말고 작서아자가 알고리즘을 완벽히 이해하기

  - 어떤 공식은 그냥 숫자를 쓰는 편이 좋지만 의미가 분명하지 않은 토큰은 명명된 상수로 교체하라

  - 조건을 캡슐화해라

    - if(shouldBeDeleted(timer))  -> GOOD!
    - if(timer.hasExpired() && !timer.isRecurrent()) -> BAD!

  - 가능하면 긍정조건으로 표현하라

    - if(!buffer.shouldNotComparct()) -> GOOD!
    - if(buffer.shouldComparct()) -> BAD!

  - 함수는 한가지 기능만 수행해야 함

  - 함수 내 모든 문장은 추상화 수준이 동일해야 함, 그 추상화 수준은 함수 이름이 의미하는 작업보다 한 단계만 낮아야 함

  - 추상화 최상위 단계에 둬야 할 기본값 상수나 설정 관련 상수를 저차원 함수에 숨겨서는 안 됨

  - 디미터의 법칙 : 내가 아는 모듈이 연이어 자신이 아는 모듈을 따라가며 시스템 전체를 휘저을 필요는 없다

- 자바

  - 긴 import 목록을 피하고 와일드카드를 사용하라
  - 상수는 상속하지 않는다, 대신 static import를 사용하라
  - enum을 마음껏 활용하라

- 이름

  - 서술적인 이름을 사용하라
  - 구현을 드러내는 이름은 피해라
  - 표준 명명법을 사용하라
  - 함수나 변수의 목적을 명확히 밝히는 이름을 사용하라
  - 이름에 유형정보나 범위 정보를 넣지마라

- 테스트

  - 테스트 케이스는 잠재적으로 깨질만한 부분을 모두 테스트 해야한다
  - 커버리지 도구를 사용하라
  - 사소한 테스트를 건너뛰지 마라
  - 경계조건을 테스트하라
  - 버그는 서로 모이는 경향이 있다, 버그 주변을 철저히 테스트하라
  - 실패 패턴을 살펴라
  - 테스트 커버리지 패턴을 살펴라
  - 테스트는 빨라야 한다

